// GENERATED CODE - DO NOT MODIFY BY HAND

part of '../../../models/gamedata/const_data.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

ConstGameData _$ConstGameDataFromJson(Map json) => ConstGameData(
      cnReplace: (json['cnReplace'] as Map?)?.map(
            (k, e) => MapEntry(k as String, e as String),
          ) ??
          const {},
      attributeRelation: (json['attributeRelation'] as Map?)?.map(
            (k, e) => MapEntry(
                const ServantSubAttributeConverter().fromJson(k),
                (e as Map).map(
                  (k, e) => MapEntry(const ServantSubAttributeConverter().fromJson(k), (e as num).toInt()),
                )),
          ) ??
          const {},
      buffActions: (json['buffActions'] as Map?)?.map(
            (k, e) => MapEntry(
                const BuffActionConverter().fromJson(k), BuffActionInfo.fromJson(Map<String, dynamic>.from(e as Map))),
          ) ??
          const {},
      cardInfo: (json['cardInfo'] as Map?)?.map(
            (k, e) => MapEntry(
                $enumDecode(_$CardTypeEnumMap, k),
                (e as Map).map(
                  (k, e) => MapEntry(int.parse(k as String), CardInfo.fromJson(Map<String, dynamic>.from(e as Map))),
                )),
          ) ??
          const {},
      classInfo: (json['classInfo'] as Map?)?.map(
            (k, e) => MapEntry(int.parse(k as String), SvtClassInfo.fromJson(Map<String, dynamic>.from(e as Map))),
          ) ??
          const {},
      classRelation: (json['classRelation'] as Map?)?.map(
            (k, e) => MapEntry(
                int.parse(k as String),
                (e as Map).map(
                  (k, e) => MapEntry(int.parse(k as String), (e as num).toInt()),
                )),
          ) ??
          const {},
      constants: json['constants'] == null
          ? const GameConstants()
          : GameConstants.fromJson(Map<String, dynamic>.from(json['constants'] as Map)),
      constantStr: json['constantStr'] == null
          ? const GameConstantStr()
          : GameConstantStr.fromJson(Map<String, dynamic>.from(json['constantStr'] as Map)),
      svtGrailCost: (json['svtGrailCost'] as Map?)?.map(
            (k, e) => MapEntry(
                int.parse(k as String),
                (e as Map).map(
                  (k, e) =>
                      MapEntry(int.parse(k as String), GrailCostDetail.fromJson(Map<String, dynamic>.from(e as Map))),
                )),
          ) ??
          const {},
      userLevel: (json['userLevel'] as Map?)?.map(
            (k, e) =>
                MapEntry(int.parse(k as String), MasterUserLvDetail.fromJson(Map<String, dynamic>.from(e as Map))),
          ) ??
          const {},
      svtExp: (json['svtExp'] as Map?)?.map(
            (k, e) => MapEntry(int.parse(k as String), SvtExpCurve.fromJson(Map<String, dynamic>.from(e as Map))),
          ) ??
          const {},
      funcTypeDetail: (json['funcTypeDetail'] as Map?)?.map(
            (k, e) => MapEntry(int.parse(k as String), FuncTypeDetail.fromJson(Map<String, dynamic>.from(e as Map))),
          ) ??
          const {},
      buffTypeDetail: (json['buffTypeDetail'] as Map?)?.map(
            (k, e) => MapEntry(int.parse(k as String), BuffTypeDetail.fromJson(Map<String, dynamic>.from(e as Map))),
          ) ??
          const {},
      svtLimitHides: (json['svtLimitHides'] as Map?)?.map(
            (k, e) => MapEntry(int.parse(k as String),
                (e as List<dynamic>).map((e) => SvtLimitHide.fromJson(Map<String, dynamic>.from(e as Map))).toList()),
          ) ??
          const {},
      eventPointBuffGroupSkillNumMap: (json['eventPointBuffGroupSkillNumMap'] as Map?)?.map(
            (k, e) => MapEntry(
                int.parse(k as String),
                (e as Map).map(
                  (k, e) => MapEntry(int.parse(k as String), (e as num).toInt()),
                )),
          ) ??
          const {},
      laplaceUploadAllowAiQuests:
          (json['laplaceUploadAllowAiQuests'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
      excludeRewardQuests:
          (json['excludeRewardQuests'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
      randomEnemyQuests:
          (json['randomEnemyQuests'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
      svtFaceLimits: (json['svtFaceLimits'] as Map?)?.map(
            (k, e) => MapEntry(int.parse(k as String), (e as List<dynamic>).map((e) => (e as num).toInt()).toList()),
          ) ??
          const {},
      config: json['config'] == null
          ? const ConstDataConfig()
          : ConstDataConfig.fromJson(Map<String, dynamic>.from(json['config'] as Map)),
      destinyOrderSummons:
          (json['destinyOrderSummons'] as List<dynamic>?)?.map((e) => e as String).toList() ?? const [],
    );

Map<String, dynamic> _$ConstGameDataToJson(ConstGameData instance) => <String, dynamic>{
      'cnReplace': instance.cnReplace,
      'attributeRelation': instance.attributeRelation.map((k, e) => MapEntry(
          const ServantSubAttributeConverter().toJson(k),
          e.map((k, e) => MapEntry(const ServantSubAttributeConverter().toJson(k), e)))),
      'buffActions': instance.buffActions.map((k, e) => MapEntry(const BuffActionConverter().toJson(k), e.toJson())),
      'cardInfo': instance.cardInfo
          .map((k, e) => MapEntry(_$CardTypeEnumMap[k]!, e.map((k, e) => MapEntry(k.toString(), e.toJson())))),
      'classInfo': instance.classInfo.map((k, e) => MapEntry(k.toString(), e.toJson())),
      'classRelation':
          instance.classRelation.map((k, e) => MapEntry(k.toString(), e.map((k, e) => MapEntry(k.toString(), e)))),
      'constants': instance.constants.toJson(),
      'constantStr': instance.constantStr.toJson(),
      'svtGrailCost': instance.svtGrailCost
          .map((k, e) => MapEntry(k.toString(), e.map((k, e) => MapEntry(k.toString(), e.toJson())))),
      'userLevel': instance.userLevel.map((k, e) => MapEntry(k.toString(), e.toJson())),
      'svtExp': instance.svtExp.map((k, e) => MapEntry(k.toString(), e.toJson())),
      'funcTypeDetail': instance.funcTypeDetail.map((k, e) => MapEntry(k.toString(), e.toJson())),
      'buffTypeDetail': instance.buffTypeDetail.map((k, e) => MapEntry(k.toString(), e.toJson())),
      'destinyOrderSummons': instance.destinyOrderSummons,
      'svtLimitHides': instance.svtLimitHides.map((k, e) => MapEntry(k.toString(), e.map((e) => e.toJson()).toList())),
      'eventPointBuffGroupSkillNumMap': instance.eventPointBuffGroupSkillNumMap
          .map((k, e) => MapEntry(k.toString(), e.map((k, e) => MapEntry(k.toString(), e)))),
      'laplaceUploadAllowAiQuests': instance.laplaceUploadAllowAiQuests,
      'excludeRewardQuests': instance.excludeRewardQuests,
      'randomEnemyQuests': instance.randomEnemyQuests,
      'svtFaceLimits': instance.svtFaceLimits.map((k, e) => MapEntry(k.toString(), e)),
      'config': instance.config.toJson(),
    };

const _$CardTypeEnumMap = {
  CardType.none: 'none',
  CardType.arts: 'arts',
  CardType.buster: 'buster',
  CardType.quick: 'quick',
  CardType.extra: 'extra',
  CardType.blank: 'blank',
  CardType.weak: 'weak',
  CardType.strength: 'strength',
};

ConstDataConfig _$ConstDataConfigFromJson(Map json) => ConstDataConfig(
      autoLoginMinVerJp: json['autoLoginMinVerJp'] as String? ?? '999.999.999',
      autoLoginMinVerNa: json['autoLoginMinVerNa'] as String? ?? '2.5.0',
    );

Map<String, dynamic> _$ConstDataConfigToJson(ConstDataConfig instance) => <String, dynamic>{
      'autoLoginMinVerJp': instance.autoLoginMinVerJp,
      'autoLoginMinVerNa': instance.autoLoginMinVerNa,
    };

BuffActionInfo _$BuffActionInfoFromJson(Map json) => BuffActionInfo(
      limit: $enumDecode(_$BuffLimitEnumMap, json['limit']),
      plusTypes:
          (json['plusTypes'] as List<dynamic>).map((e) => const BuffTypeConverter().fromJson(e as String)).toList(),
      minusTypes:
          (json['minusTypes'] as List<dynamic>).map((e) => const BuffTypeConverter().fromJson(e as String)).toList(),
      baseParam: (json['baseParam'] as num).toInt(),
      baseValue: (json['baseValue'] as num).toInt(),
      isRec: json['isRec'] as bool,
      plusAction: const BuffActionConverter().fromJson(json['plusAction']),
      maxRate: (json['maxRate'] as List<dynamic>).map((e) => (e as num).toInt()).toList(),
    );

Map<String, dynamic> _$BuffActionInfoToJson(BuffActionInfo instance) => <String, dynamic>{
      'limit': _$BuffLimitEnumMap[instance.limit]!,
      'plusTypes': instance.plusTypes.map(const BuffTypeConverter().toJson).toList(),
      'minusTypes': instance.minusTypes.map(const BuffTypeConverter().toJson).toList(),
      'baseParam': instance.baseParam,
      'baseValue': instance.baseValue,
      'isRec': instance.isRec,
      'plusAction': const BuffActionConverter().toJson(instance.plusAction),
      'maxRate': instance.maxRate,
    };

const _$BuffLimitEnumMap = {
  BuffLimit.none: 'none',
  BuffLimit.upper: 'upper',
  BuffLimit.lower: 'lower',
  BuffLimit.normal: 'normal',
};

SvtClassInfo _$SvtClassInfoFromJson(Map json) => SvtClassInfo(
      id: (json['id'] as num).toInt(),
      attri: (json['attri'] as num).toInt(),
      name: json['name'] as String? ?? '',
      individuality: (json['individuality'] as num?)?.toInt() ?? 0,
      attackRate: (json['attackRate'] as num).toInt(),
      imageId: (json['imageId'] as num).toInt(),
      iconImageId: (json['iconImageId'] as num).toInt(),
      frameId: (json['frameId'] as num).toInt(),
      priority: (json['priority'] as num).toInt(),
      groupType: (json['groupType'] as num).toInt(),
      relationId: (json['relationId'] as num).toInt(),
      supportGroup: (json['supportGroup'] as num).toInt(),
      autoSelSupportType: (json['autoSelSupportType'] as num).toInt(),
    );

Map<String, dynamic> _$SvtClassInfoToJson(SvtClassInfo instance) => <String, dynamic>{
      'id': instance.id,
      'attri': instance.attri,
      'name': instance.name,
      'individuality': instance.individuality,
      'attackRate': instance.attackRate,
      'imageId': instance.imageId,
      'iconImageId': instance.iconImageId,
      'frameId': instance.frameId,
      'priority': instance.priority,
      'groupType': instance.groupType,
      'relationId': instance.relationId,
      'supportGroup': instance.supportGroup,
      'autoSelSupportType': instance.autoSelSupportType,
    };

CardInfo _$CardInfoFromJson(Map json) => CardInfo(
      individuality: (json['individuality'] as List<dynamic>)
          .map((e) => NiceTrait.fromJson(Map<String, dynamic>.from(e as Map)))
          .toList(),
      adjustAtk: (json['adjustAtk'] as num).toInt(),
      adjustTdGauge: (json['adjustTdGauge'] as num).toInt(),
      adjustCritical: (json['adjustCritical'] as num).toInt(),
      addAtk: (json['addAtk'] as num).toInt(),
      addTdGauge: (json['addTdGauge'] as num).toInt(),
      addCritical: (json['addCritical'] as num).toInt(),
    );

Map<String, dynamic> _$CardInfoToJson(CardInfo instance) => <String, dynamic>{
      'individuality': instance.individuality.map((e) => e.toJson()).toList(),
      'adjustAtk': instance.adjustAtk,
      'adjustTdGauge': instance.adjustTdGauge,
      'adjustCritical': instance.adjustCritical,
      'addAtk': instance.addAtk,
      'addTdGauge': instance.addTdGauge,
      'addCritical': instance.addCritical,
    };

GrailCostDetail _$GrailCostDetailFromJson(Map json) => GrailCostDetail(
      qp: (json['qp'] as num).toInt(),
      addLvMax: (json['addLvMax'] as num).toInt(),
      frameType: $enumDecodeNullable(_$SvtFrameTypeEnumMap, json['frameType']) ?? SvtFrameType.gold,
    );

Map<String, dynamic> _$GrailCostDetailToJson(GrailCostDetail instance) => <String, dynamic>{
      'qp': instance.qp,
      'addLvMax': instance.addLvMax,
      'frameType': _$SvtFrameTypeEnumMap[instance.frameType]!,
    };

const _$SvtFrameTypeEnumMap = {
  SvtFrameType.black: 'black',
  SvtFrameType.bronze: 'bronze',
  SvtFrameType.silver: 'silver',
  SvtFrameType.gold: 'gold',
  SvtFrameType.frame0801: 'frame0801',
  SvtFrameType.frame0802: 'frame0802',
  SvtFrameType.frame0803: 'frame0803',
  SvtFrameType.frame0804: 'frame0804',
};

MasterUserLvDetail _$MasterUserLvDetailFromJson(Map json) => MasterUserLvDetail(
      requiredExp: (json['requiredExp'] as num).toInt(),
      maxAp: (json['maxAp'] as num).toInt(),
      maxCost: (json['maxCost'] as num).toInt(),
      maxFriend: (json['maxFriend'] as num).toInt(),
      gift: json['gift'] == null ? null : Gift.fromJson(Map<String, dynamic>.from(json['gift'] as Map)),
    );

Map<String, dynamic> _$MasterUserLvDetailToJson(MasterUserLvDetail instance) => <String, dynamic>{
      'requiredExp': instance.requiredExp,
      'maxAp': instance.maxAp,
      'maxCost': instance.maxCost,
      'maxFriend': instance.maxFriend,
      'gift': instance.gift?.toJson(),
    };

SvtExpCurve _$SvtExpCurveFromJson(Map json) => SvtExpCurve(
      type: (json['type'] as num).toInt(),
      lv: (json['lv'] as List<dynamic>).map((e) => (e as num).toInt()).toList(),
      exp: (json['exp'] as List<dynamic>).map((e) => (e as num).toInt()).toList(),
      curve: (json['curve'] as List<dynamic>).map((e) => (e as num).toInt()).toList(),
    );

Map<String, dynamic> _$SvtExpCurveToJson(SvtExpCurve instance) => <String, dynamic>{
      'type': instance.type,
      'lv': instance.lv,
      'exp': instance.exp,
      'curve': instance.curve,
    };

FuncTypeDetail _$FuncTypeDetailFromJson(Map json) => FuncTypeDetail(
      funcType: $enumDecodeNullable(_$FuncTypeEnumMap, json['funcType']) ?? FuncType.unknown,
      ignoreValueUp: json['ignoreValueUp'] as bool,
      individuality: (json['individuality'] as List<dynamic>?)
              ?.map((e) => NiceTrait.fromJson(Map<String, dynamic>.from(e as Map)))
              .toList() ??
          const [],
    );

Map<String, dynamic> _$FuncTypeDetailToJson(FuncTypeDetail instance) => <String, dynamic>{
      'funcType': _$FuncTypeEnumMap[instance.funcType]!,
      'ignoreValueUp': instance.ignoreValueUp,
      'individuality': instance.individuality.map((e) => e.toJson()).toList(),
    };

const _$FuncTypeEnumMap = {
  FuncType.unknown: 'unknown',
  FuncType.none: 'none',
  FuncType.addState: 'addState',
  FuncType.subState: 'subState',
  FuncType.damage: 'damage',
  FuncType.damageNp: 'damageNp',
  FuncType.gainStar: 'gainStar',
  FuncType.gainHp: 'gainHp',
  FuncType.gainNp: 'gainNp',
  FuncType.lossNp: 'lossNp',
  FuncType.shortenSkill: 'shortenSkill',
  FuncType.extendSkill: 'extendSkill',
  FuncType.releaseState: 'releaseState',
  FuncType.lossHp: 'lossHp',
  FuncType.instantDeath: 'instantDeath',
  FuncType.damageNpPierce: 'damageNpPierce',
  FuncType.damageNpIndividual: 'damageNpIndividual',
  FuncType.addStateShort: 'addStateShort',
  FuncType.gainHpPer: 'gainHpPer',
  FuncType.damageNpStateIndividual: 'damageNpStateIndividual',
  FuncType.hastenNpturn: 'hastenNpturn',
  FuncType.delayNpturn: 'delayNpturn',
  FuncType.damageNpHpratioHigh: 'damageNpHpratioHigh',
  FuncType.damageNpHpratioLow: 'damageNpHpratioLow',
  FuncType.cardReset: 'cardReset',
  FuncType.replaceMember: 'replaceMember',
  FuncType.lossHpSafe: 'lossHpSafe',
  FuncType.damageNpCounter: 'damageNpCounter',
  FuncType.damageNpStateIndividualFix: 'damageNpStateIndividualFix',
  FuncType.damageNpSafe: 'damageNpSafe',
  FuncType.callServant: 'callServant',
  FuncType.ptShuffle: 'ptShuffle',
  FuncType.lossStar: 'lossStar',
  FuncType.changeServant: 'changeServant',
  FuncType.changeBg: 'changeBg',
  FuncType.damageValue: 'damageValue',
  FuncType.withdraw: 'withdraw',
  FuncType.fixCommandcard: 'fixCommandcard',
  FuncType.shortenBuffturn: 'shortenBuffturn',
  FuncType.extendBuffturn: 'extendBuffturn',
  FuncType.shortenBuffcount: 'shortenBuffcount',
  FuncType.extendBuffcount: 'extendBuffcount',
  FuncType.changeBgm: 'changeBgm',
  FuncType.displayBuffstring: 'displayBuffstring',
  FuncType.resurrection: 'resurrection',
  FuncType.gainNpBuffIndividualSum: 'gainNpBuffIndividualSum',
  FuncType.setSystemAliveFlag: 'setSystemAliveFlag',
  FuncType.forceInstantDeath: 'forceInstantDeath',
  FuncType.damageNpRare: 'damageNpRare',
  FuncType.gainNpFromTargets: 'gainNpFromTargets',
  FuncType.gainHpFromTargets: 'gainHpFromTargets',
  FuncType.lossHpPer: 'lossHpPer',
  FuncType.lossHpPerSafe: 'lossHpPerSafe',
  FuncType.shortenUserEquipSkill: 'shortenUserEquipSkill',
  FuncType.quickChangeBg: 'quickChangeBg',
  FuncType.shiftServant: 'shiftServant',
  FuncType.damageNpAndCheckIndividuality: 'damageNpAndCheckIndividuality',
  FuncType.absorbNpturn: 'absorbNpturn',
  FuncType.overwriteDeadType: 'overwriteDeadType',
  FuncType.forceAllBuffNoact: 'forceAllBuffNoact',
  FuncType.breakGaugeUp: 'breakGaugeUp',
  FuncType.breakGaugeDown: 'breakGaugeDown',
  FuncType.moveToLastSubmember: 'moveToLastSubmember',
  FuncType.extendUserEquipSkill: 'extendUserEquipSkill',
  FuncType.updateEnemyEntryMaxCountEachTurn: 'updateEnemyEntryMaxCountEachTurn',
  FuncType.expUp: 'expUp',
  FuncType.qpUp: 'qpUp',
  FuncType.dropUp: 'dropUp',
  FuncType.friendPointUp: 'friendPointUp',
  FuncType.eventDropUp: 'eventDropUp',
  FuncType.eventDropRateUp: 'eventDropRateUp',
  FuncType.eventPointUp: 'eventPointUp',
  FuncType.eventPointRateUp: 'eventPointRateUp',
  FuncType.transformServant: 'transformServant',
  FuncType.qpDropUp: 'qpDropUp',
  FuncType.servantFriendshipUp: 'servantFriendshipUp',
  FuncType.userEquipExpUp: 'userEquipExpUp',
  FuncType.classDropUp: 'classDropUp',
  FuncType.enemyEncountCopyRateUp: 'enemyEncountCopyRateUp',
  FuncType.enemyEncountRateUp: 'enemyEncountRateUp',
  FuncType.enemyProbDown: 'enemyProbDown',
  FuncType.getRewardGift: 'getRewardGift',
  FuncType.sendSupportFriendPoint: 'sendSupportFriendPoint',
  FuncType.movePosition: 'movePosition',
  FuncType.revival: 'revival',
  FuncType.damageNpIndividualSum: 'damageNpIndividualSum',
  FuncType.damageValueSafe: 'damageValueSafe',
  FuncType.friendPointUpDuplicate: 'friendPointUpDuplicate',
  FuncType.moveState: 'moveState',
  FuncType.changeBgmCostume: 'changeBgmCostume',
  FuncType.lossCommandSpell: 'lossCommandSpell',
  FuncType.gainCommandSpell: 'gainCommandSpell',
  FuncType.updateEntryPositions: 'updateEntryPositions',
  FuncType.buddyPointUp: 'buddyPointUp',
  FuncType.addFieldChangeToField: 'addFieldChangeToField',
  FuncType.subFieldBuff: 'subFieldBuff',
  FuncType.eventFortificationPointUp: 'eventFortificationPointUp',
  FuncType.gainNpIndividualSum: 'gainNpIndividualSum',
  FuncType.setQuestRouteFlag: 'setQuestRouteFlag',
  FuncType.lastUsePlayerSkillCopy: 'lastUsePlayerSkillCopy',
  FuncType.changeEnemyMasterFace: 'changeEnemyMasterFace',
  FuncType.damageValueSafeOnce: 'damageValueSafeOnce',
  FuncType.addBattleValue: 'addBattleValue',
  FuncType.setBattleValue: 'setBattleValue',
  FuncType.gainMultiplyNp: 'gainMultiplyNp',
  FuncType.lossMultiplyNp: 'lossMultiplyNp',
};

BuffTypeDetail _$BuffTypeDetailFromJson(Map json) => BuffTypeDetail(
      buffType: $enumDecodeNullable(_$BuffTypeEnumMap, json['buffType']) ?? BuffType.unknown,
      ignoreValueUp: json['ignoreValueUp'] as bool,
    );

Map<String, dynamic> _$BuffTypeDetailToJson(BuffTypeDetail instance) => <String, dynamic>{
      'buffType': _$BuffTypeEnumMap[instance.buffType]!,
      'ignoreValueUp': instance.ignoreValueUp,
    };

const _$BuffTypeEnumMap = {
  BuffType.unknown: 'unknown',
  BuffType.none: 'none',
  BuffType.upCommandatk: 'upCommandatk',
  BuffType.upStarweight: 'upStarweight',
  BuffType.upCriticalpoint: 'upCriticalpoint',
  BuffType.downCriticalpoint: 'downCriticalpoint',
  BuffType.regainNp: 'regainNp',
  BuffType.regainStar: 'regainStar',
  BuffType.regainHp: 'regainHp',
  BuffType.reduceHp: 'reduceHp',
  BuffType.upAtk: 'upAtk',
  BuffType.downAtk: 'downAtk',
  BuffType.upDamage: 'upDamage',
  BuffType.downDamage: 'downDamage',
  BuffType.addDamage: 'addDamage',
  BuffType.subDamage: 'subDamage',
  BuffType.upNpdamage: 'upNpdamage',
  BuffType.downNpdamage: 'downNpdamage',
  BuffType.upDropnp: 'upDropnp',
  BuffType.upCriticaldamage: 'upCriticaldamage',
  BuffType.downCriticaldamage: 'downCriticaldamage',
  BuffType.upSelfdamage: 'upSelfdamage',
  BuffType.downSelfdamage: 'downSelfdamage',
  BuffType.addSelfdamage: 'addSelfdamage',
  BuffType.subSelfdamage: 'subSelfdamage',
  BuffType.avoidance: 'avoidance',
  BuffType.breakAvoidance: 'breakAvoidance',
  BuffType.invincible: 'invincible',
  BuffType.upGrantstate: 'upGrantstate',
  BuffType.downGrantstate: 'downGrantstate',
  BuffType.upTolerance: 'upTolerance',
  BuffType.downTolerance: 'downTolerance',
  BuffType.avoidState: 'avoidState',
  BuffType.donotAct: 'donotAct',
  BuffType.donotSkill: 'donotSkill',
  BuffType.donotNoble: 'donotNoble',
  BuffType.donotRecovery: 'donotRecovery',
  BuffType.disableGender: 'disableGender',
  BuffType.guts: 'guts',
  BuffType.upHate: 'upHate',
  BuffType.addIndividuality: 'addIndividuality',
  BuffType.subIndividuality: 'subIndividuality',
  BuffType.upDefence: 'upDefence',
  BuffType.downDefence: 'downDefence',
  BuffType.upCommandstar: 'upCommandstar',
  BuffType.upCommandnp: 'upCommandnp',
  BuffType.upCommandall: 'upCommandall',
  BuffType.downCommandall: 'downCommandall',
  BuffType.downStarweight: 'downStarweight',
  BuffType.reduceNp: 'reduceNp',
  BuffType.downDropnp: 'downDropnp',
  BuffType.upGainHp: 'upGainHp',
  BuffType.downGainHp: 'downGainHp',
  BuffType.downCommandatk: 'downCommandatk',
  BuffType.downCommanstar: 'downCommanstar',
  BuffType.downCommandnp: 'downCommandnp',
  BuffType.upCriticalrate: 'upCriticalrate',
  BuffType.downCriticalrate: 'downCriticalrate',
  BuffType.pierceInvincible: 'pierceInvincible',
  BuffType.avoidInstantdeath: 'avoidInstantdeath',
  BuffType.upResistInstantdeath: 'upResistInstantdeath',
  BuffType.upNonresistInstantdeath: 'upNonresistInstantdeath',
  BuffType.delayFunction: 'delayFunction',
  BuffType.regainNpUsedNoble: 'regainNpUsedNoble',
  BuffType.deadFunction: 'deadFunction',
  BuffType.upMaxhp: 'upMaxhp',
  BuffType.downMaxhp: 'downMaxhp',
  BuffType.addMaxhp: 'addMaxhp',
  BuffType.subMaxhp: 'subMaxhp',
  BuffType.battlestartFunction: 'battlestartFunction',
  BuffType.wavestartFunction: 'wavestartFunction',
  BuffType.selfturnendFunction: 'selfturnendFunction',
  BuffType.damageFunction: 'damageFunction',
  BuffType.upGivegainHp: 'upGivegainHp',
  BuffType.downGivegainHp: 'downGivegainHp',
  BuffType.commandattackAfterFunction: 'commandattackAfterFunction',
  BuffType.deadattackFunction: 'deadattackFunction',
  BuffType.upSpecialdefence: 'upSpecialdefence',
  BuffType.downSpecialdefence: 'downSpecialdefence',
  BuffType.upDamagedropnp: 'upDamagedropnp',
  BuffType.downDamagedropnp: 'downDamagedropnp',
  BuffType.entryFunction: 'entryFunction',
  BuffType.upChagetd: 'upChagetd',
  BuffType.reflectionFunction: 'reflectionFunction',
  BuffType.upGrantSubstate: 'upGrantSubstate',
  BuffType.downGrantSubstate: 'downGrantSubstate',
  BuffType.upToleranceSubstate: 'upToleranceSubstate',
  BuffType.downToleranceSubstate: 'downToleranceSubstate',
  BuffType.upGrantInstantdeath: 'upGrantInstantdeath',
  BuffType.downGrantInstantdeath: 'downGrantInstantdeath',
  BuffType.gutsRatio: 'gutsRatio',
  BuffType.upDefencecommandall: 'upDefencecommandall',
  BuffType.downDefencecommandall: 'downDefencecommandall',
  BuffType.overwriteBattleclass: 'overwriteBattleclass',
  BuffType.overwriteClassrelatioAtk: 'overwriteClassrelatioAtk',
  BuffType.overwriteClassrelatioDef: 'overwriteClassrelatioDef',
  BuffType.upDamageIndividuality: 'upDamageIndividuality',
  BuffType.downDamageIndividuality: 'downDamageIndividuality',
  BuffType.upDamageIndividualityActiveonly: 'upDamageIndividualityActiveonly',
  BuffType.downDamageIndividualityActiveonly: 'downDamageIndividualityActiveonly',
  BuffType.upNpturnval: 'upNpturnval',
  BuffType.downNpturnval: 'downNpturnval',
  BuffType.multiattack: 'multiattack',
  BuffType.upGiveNp: 'upGiveNp',
  BuffType.downGiveNp: 'downGiveNp',
  BuffType.upResistanceDelayNpturn: 'upResistanceDelayNpturn',
  BuffType.downResistanceDelayNpturn: 'downResistanceDelayNpturn',
  BuffType.pierceDefence: 'pierceDefence',
  BuffType.upGutsHp: 'upGutsHp',
  BuffType.downGutsHp: 'downGutsHp',
  BuffType.upFuncgainNp: 'upFuncgainNp',
  BuffType.downFuncgainNp: 'downFuncgainNp',
  BuffType.upFuncHpReduce: 'upFuncHpReduce',
  BuffType.downFuncHpReduce: 'downFuncHpReduce',
  BuffType.upDefenceCommanddamage: 'upDefenceCommanddamage',
  BuffType.downDefenceCommanddamage: 'downDefenceCommanddamage',
  BuffType.npattackPrevBuff: 'npattackPrevBuff',
  BuffType.fixCommandcard: 'fixCommandcard',
  BuffType.donotGainnp: 'donotGainnp',
  BuffType.fieldIndividuality: 'fieldIndividuality',
  BuffType.donotActCommandtype: 'donotActCommandtype',
  BuffType.upDamageEventPoint: 'upDamageEventPoint',
  BuffType.upDamageSpecial: 'upDamageSpecial',
  BuffType.attackAfterFunction: 'attackAfterFunction',
  BuffType.commandcodeattackBeforeFunction: 'commandcodeattackBeforeFunction',
  BuffType.donotNobleCondMismatch: 'donotNobleCondMismatch',
  BuffType.donotSelectCommandcard: 'donotSelectCommandcard',
  BuffType.donotReplace: 'donotReplace',
  BuffType.shortenUserEquipSkill: 'shortenUserEquipSkill',
  BuffType.tdTypeChange: 'tdTypeChange',
  BuffType.overwriteClassRelation: 'overwriteClassRelation',
  BuffType.tdTypeChangeArts: 'tdTypeChangeArts',
  BuffType.tdTypeChangeBuster: 'tdTypeChangeBuster',
  BuffType.tdTypeChangeQuick: 'tdTypeChangeQuick',
  BuffType.commandattackBeforeFunction: 'commandattackBeforeFunction',
  BuffType.gutsFunction: 'gutsFunction',
  BuffType.upCriticalRateDamageTaken: 'upCriticalRateDamageTaken',
  BuffType.downCriticalRateDamageTaken: 'downCriticalRateDamageTaken',
  BuffType.upCriticalStarDamageTaken: 'upCriticalStarDamageTaken',
  BuffType.downCriticalStarDamageTaken: 'downCriticalStarDamageTaken',
  BuffType.skillRankUp: 'skillRankUp',
  BuffType.avoidanceIndividuality: 'avoidanceIndividuality',
  BuffType.changeCommandCardType: 'changeCommandCardType',
  BuffType.specialInvincible: 'specialInvincible',
  BuffType.preventDeathByDamage: 'preventDeathByDamage',
  BuffType.commandcodeattackAfterFunction: 'commandcodeattackAfterFunction',
  BuffType.attackBeforeFunction: 'attackBeforeFunction',
  BuffType.donotSkillSelect: 'donotSkillSelect',
  BuffType.buffRate: 'buffRate',
  BuffType.invisibleBattleChara: 'invisibleBattleChara',
  BuffType.counterFunction: 'counterFunction',
  BuffType.notTargetSkill: 'notTargetSkill',
  BuffType.hpReduceToRegain: 'hpReduceToRegain',
  BuffType.selfturnstartFunction: 'selfturnstartFunction',
  BuffType.overwriteDeadType: 'overwriteDeadType',
  BuffType.upActionCount: 'upActionCount',
  BuffType.downActionCount: 'downActionCount',
  BuffType.shiftGuts: 'shiftGuts',
  BuffType.shiftGutsRatio: 'shiftGutsRatio',
  BuffType.masterSkillValueUp: 'masterSkillValueUp',
  BuffType.buffConvert: 'buffConvert',
  BuffType.subFieldIndividuality: 'subFieldIndividuality',
  BuffType.commandcodeattackBeforeFunctionMainOnly: 'commandcodeattackBeforeFunctionMainOnly',
  BuffType.commandcodeattackAfterFunctionMainOnly: 'commandcodeattackAfterFunctionMainOnly',
  BuffType.commandattackBeforeFunctionMainOnly: 'commandattackBeforeFunctionMainOnly',
  BuffType.commandattackAfterFunctionMainOnly: 'commandattackAfterFunctionMainOnly',
  BuffType.attackBeforeFunctionMainOnly: 'attackBeforeFunctionMainOnly',
  BuffType.attackAfterFunctionMainOnly: 'attackAfterFunctionMainOnly',
  BuffType.warBoardNotAttacked: 'warBoardNotAttacked',
  BuffType.warBoardIgnoreDefeatpoint: 'warBoardIgnoreDefeatpoint',
  BuffType.skillAfterFunction: 'skillAfterFunction',
  BuffType.treasureDeviceAfterFunction: 'treasureDeviceAfterFunction',
  BuffType.skillAfterFunctionMainOnly: 'skillAfterFunctionMainOnly',
  BuffType.treasureDeviceAfterFunctionMainOnly: 'treasureDeviceAfterFunctionMainOnly',
  BuffType.preventInvisibleWhenInstantDeath: 'preventInvisibleWhenInstantDeath',
  BuffType.overwriteSubattribute: 'overwriteSubattribute',
  BuffType.avoidanceAttackDeathDamage: 'avoidanceAttackDeathDamage',
  BuffType.avoidFunctionExecuteSelf: 'avoidFunctionExecuteSelf',
  BuffType.pierceSubdamage: 'pierceSubdamage',
  BuffType.continueFunction: 'continueFunction',
  BuffType.addSpecialdamage: 'addSpecialdamage',
  BuffType.subSpecialdamage: 'subSpecialdamage',
  BuffType.addFuncHpReduce: 'addFuncHpReduce',
  BuffType.subFuncHpReduce: 'subFuncHpReduce',
  BuffType.changeBgm: 'changeBgm',
  BuffType.toFieldChangeField: 'toFieldChangeField',
  BuffType.toFieldAvoidBuff: 'toFieldAvoidBuff',
  BuffType.toFieldSubIndividualityField: 'toFieldSubIndividualityField',
};

GameConstants _$GameConstantsFromJson(Map json) => GameConstants(
      k20220731BoostRate1: (json['k20220731BoostRate1'] as num?)?.toInt() ?? 200,
      accountingInitializeTimeout: (json['accountingInitializeTimeout'] as num?)?.toInt() ?? 60,
      aftreChangeFreeDrawNum: (json['aftreChangeFreeDrawNum'] as num?)?.toInt() ?? 10,
      attackRate: (json['attackRate'] as num?)?.toInt() ?? 230,
      attackRateRandomMax: (json['attackRateRandomMax'] as num?)?.toInt() ?? 1100,
      attackRateRandomMin: (json['attackRateRandomMin'] as num?)?.toInt() ?? 900,
      backsideClassImageId: (json['backsideClassImageId'] as num?)?.toInt() ?? 102,
      backsideSvtEquipImageId: (json['backsideSvtEquipImageId'] as num?)?.toInt() ?? 103,
      backsideSvtImageId: (json['backsideSvtImageId'] as num?)?.toInt() ?? 101,
      battleEffectId3003001: (json['battleEffectId3003001'] as num?)?.toInt() ?? 3048001,
      battleEffectIdAvoidance: (json['battleEffectIdAvoidance'] as num?)?.toInt() ?? 6216,
      battleEffectIdAvoidancePierce: (json['battleEffectIdAvoidancePierce'] as num?)?.toInt() ?? 6217,
      battleEffectIdInvincible: (json['battleEffectIdInvincible'] as num?)?.toInt() ?? 6214,
      battleEffectIdInvinciblePierce: (json['battleEffectIdInvinciblePierce'] as num?)?.toInt() ?? 6215,
      battleEffectIdSpecialInvincible: (json['battleEffectIdSpecialInvincible'] as num?)?.toInt() ?? 2001003,
      battleItemDispColumn: (json['battleItemDispColumn'] as num?)?.toInt() ?? 7,
      battleMsgBaseTime: (json['battleMsgBaseTime'] as num?)?.toInt() ?? 1000,
      battleMsgInterval: (json['battleMsgInterval'] as num?)?.toInt() ?? 250,
      battleTimePerChara: (json['battleTimePerChara'] as num?)?.toInt() ?? 50,
      beforeChangeFreeDrawNum: (json['beforeChangeFreeDrawNum'] as num?)?.toInt() ?? 1,
      bpExpression: (json['bpExpression'] as num?)?.toInt() ?? 1,
      campaignResetAt: (json['campaignResetAt'] as num?)?.toInt() ?? 4,
      canSelectSvtMaterialFlag: (json['canSelectSvtMaterialFlag'] as num?)?.toInt() ?? 4,
      chainbonusArtsRate: (json['chainbonusArtsRate'] as num?)?.toInt() ?? 200,
      chainbonusBusterRate: (json['chainbonusBusterRate'] as num?)?.toInt() ?? 200,
      chainbonusQuick: (json['chainbonusQuick'] as num?)?.toInt() ?? 20,
      chapter1PrologueWarId: (json['chapter1PrologueWarId'] as num?)?.toInt() ?? 100,
      chapter2EpilogueWarId: (json['chapter2EpilogueWarId'] as num?)?.toInt() ?? 309,
      chapter2PrologueWarId: (json['chapter2PrologueWarId'] as num?)?.toInt() ?? 300,
      chapterFEndId: (json['chapterFEndId'] as num?)?.toInt() ?? 1000011,
      chapterFStartId: (json['chapterFStartId'] as num?)?.toInt() ?? 1000001,
      classBoardReleaseQuestId: (json['classBoardReleaseQuestId'] as num?)?.toInt() ?? 4000100,
      closeSecretTreasureDeviceQuestClear: (json['closeSecretTreasureDeviceQuestClear'] as num?)?.toInt() ?? 1,
      closeSecretTreasureDeviceSvtGet: (json['closeSecretTreasureDeviceSvtGet'] as num?)?.toInt() ?? 1,
      coinRoomGet: (json['coinRoomGet'] as num?)?.toInt() ?? 1,
      coinRoomMax: (json['coinRoomMax'] as num?)?.toInt() ?? 2000,
      coinRoomMaxNum: (json['coinRoomMaxNum'] as num?)?.toInt() ?? 2,
      coinRoomReleaseQuestId: (json['coinRoomReleaseQuestId'] as num?)?.toInt() ?? 3001101,
      combineLimitSpecialPrivilegeId: (json['combineLimitSpecialPrivilegeId'] as num?)?.toInt() ?? 100,
      comebackTargetDay: (json['comebackTargetDay'] as num?)?.toInt() ?? 1704027600,
      commandArts: (json['commandArts'] as num?)?.toInt() ?? 4001,
      commandBuster: (json['commandBuster'] as num?)?.toInt() ?? 4002,
      commandCardPrmUpMax: (json['commandCardPrmUpMax'] as num?)?.toInt() ?? 500,
      commandCodeDetachingItemId: (json['commandCodeDetachingItemId'] as num?)?.toInt() ?? 5003,
      commandQuick: (json['commandQuick'] as num?)?.toInt() ?? 4003,
      commandSpellRecoverAt: (json['commandSpellRecoverAt'] as num?)?.toInt() ?? 0,
      convertDeckUserEquipAt: (json['convertDeckUserEquipAt'] as num?)?.toInt() ?? 1481099400,
      criticalAttackRate: (json['criticalAttackRate'] as num?)?.toInt() ?? 2000,
      criticalIndividuality: (json['criticalIndividuality'] as num?)?.toInt() ?? 4100,
      criticalRatePerStar: (json['criticalRatePerStar'] as num?)?.toInt() ?? 100,
      criticalStarRate: (json['criticalStarRate'] as num?)?.toInt() ?? 200,
      criticalTdPointRate: (json['criticalTdPointRate'] as num?)?.toInt() ?? 2000,
      deckMax: (json['deckMax'] as num?)?.toInt() ?? 10,
      defaultLockBoardGroupId: (json['defaultLockBoardGroupId'] as num?)?.toInt() ?? 0,
      disableFriendshipExceed: (json['disableFriendshipExceed'] as num?)?.toInt() ?? 0,
      disableServantEffectFilter: (json['disableServantEffectFilter'] as num?)?.toInt() ?? 0,
      enableApRecover: (json['enableApRecover'] as num?)?.toInt() ?? 0,
      enablePresentHistory: (json['enablePresentHistory'] as num?)?.toInt() ?? 1,
      enableSerialCode: (json['enableSerialCode'] as num?)?.toInt() ?? 0,
      enemyAttackRateArts: (json['enemyAttackRateArts'] as num?)?.toInt() ?? 1000,
      enemyAttackRateBuster: (json['enemyAttackRateBuster'] as num?)?.toInt() ?? 1500,
      enemyAttackRateQuick: (json['enemyAttackRateQuick'] as num?)?.toInt() ?? 800,
      enemyMaxBattleCount: (json['enemyMaxBattleCount'] as num?)?.toInt() ?? 5,
      equipGetEffectId: (json['equipGetEffectId'] as num?)?.toInt() ?? 1,
      eventBoardGameMapPosition: (json['eventBoardGameMapPosition'] as num?)?.toInt() ?? 1800,
      eventBoardGameNextBoardQuestId: (json['eventBoardGameNextBoardQuestId'] as num?)?.toInt() ?? 94047745,
      eventBoardGameNextRoundQuestId: (json['eventBoardGameNextRoundQuestId'] as num?)?.toInt() ?? 94047744,
      eventDailyPointResetAt: (json['eventDailyPointResetAt'] as num?)?.toInt() ?? 10,
      eventIdRaid1: (json['eventIdRaid1'] as num?)?.toInt() ?? 80018,
      eventIdRaid2: (json['eventIdRaid2'] as num?)?.toInt() ?? 80022,
      eventItemPanelType: (json['eventItemPanelType'] as num?)?.toInt() ?? 1,
      eventRewardMuteSvtId109820770: (json['eventRewardMuteSvtId109820770'] as num?)?.toInt() ?? 1,
      eventRewardMuteSvtId109823880: (json['eventRewardMuteSvtId109823880'] as num?)?.toInt() ?? 1,
      eventTowerFadeoutPlayTime: (json['eventTowerFadeoutPlayTime'] as num?)?.toInt() ?? 1000,
      eventTowerProgressQuest1: (json['eventTowerProgressQuest1'] as num?)?.toInt() ?? 94020001,
      eventTowerProgressQuest2: (json['eventTowerProgressQuest2'] as num?)?.toInt() ?? 94020013,
      expirationDate: (json['expirationDate'] as num?)?.toInt() ?? 1893423600,
      extendFriendValue: (json['extendFriendValue'] as num?)?.toInt() ?? 5,
      extendSvtEquipValue: (json['extendSvtEquipValue'] as num?)?.toInt() ?? 5,
      extendSvtValue: (json['extendSvtValue'] as num?)?.toInt() ?? 5,
      extraAttackRateGrand: (json['extraAttackRateGrand'] as num?)?.toInt() ?? 3500,
      extraAttackRateSingle: (json['extraAttackRateSingle'] as num?)?.toInt() ?? 2000,
      extraCriticalRate: (json['extraCriticalRate'] as num?)?.toInt() ?? 0,
      fesWarId: (json['fesWarId'] as num?)?.toInt() ?? 108,
      firstEquipId: (json['firstEquipId'] as num?)?.toInt() ?? 1,
      fixEventSupportDeckNum: (json['fixEventSupportDeckNum'] as num?)?.toInt() ?? 3,
      fixMainSupportDeckNum: (json['fixMainSupportDeckNum'] as num?)?.toInt() ?? 3,
      flag20200805: (json['flag20200805'] as num?)?.toInt() ?? 1,
      flag20210801: (json['flag20210801'] as num?)?.toInt() ?? 1,
      flag20211217: (json['flag20211217'] as num?)?.toInt() ?? 1,
      flag20220101: (json['flag20220101'] as num?)?.toInt() ?? 1,
      flag20220119: (json['flag20220119'] as num?)?.toInt() ?? 1,
      flag20220511: (json['flag20220511'] as num?)?.toInt() ?? 1,
      flag20220730: (json['flag20220730'] as num?)?.toInt() ?? 1,
      flag20230402: (json['flag20230402'] as num?)?.toInt() ?? 1,
      flag20230730: (json['flag20230730'] as num?)?.toInt() ?? 1,
      flagCineraria4: (json['flagCineraria4'] as num?)?.toInt() ?? 0,
      followerListExpireAt: (json['followerListExpireAt'] as num?)?.toInt() ?? 3600,
      followerRefreshResetTime: (json['followerRefreshResetTime'] as num?)?.toInt() ?? 10,
      followFriendPoint: (json['followFriendPoint'] as num?)?.toInt() ?? 50,
      followNum: (json['followNum'] as num?)?.toInt() ?? 10,
      fourPillars: (json['fourPillars'] as num?)?.toInt() ?? 9934821,
      freeDrawNumChangeAt: (json['freeDrawNumChangeAt'] as num?)?.toInt() ?? 1475679600,
      freeGachaResetAt: (json['freeGachaResetAt'] as num?)?.toInt() ?? 0,
      friendpointBoostItemEffectId: (json['friendpointBoostItemEffectId'] as num?)?.toInt() ?? 3,
      friendGachaAddLimit: (json['friendGachaAddLimit'] as num?)?.toInt() ?? 100,
      friendGachaCommandCodeAddLimit: (json['friendGachaCommandCodeAddLimit'] as num?)?.toInt() ?? 100,
      friendNum: (json['friendNum'] as num?)?.toInt() ?? 37,
      friendOfferedNum: (json['friendOfferedNum'] as num?)?.toInt() ?? 20,
      friendPoint: (json['friendPoint'] as num?)?.toInt() ?? 25,
      fullTdPoint: (json['fullTdPoint'] as num?)?.toInt() ?? 10000,
      gachaDailyMaxDrawNumResetAt: (json['gachaDailyMaxDrawNumResetAt'] as num?)?.toInt() ?? 4,
      gachaExtraRequiredCount: (json['gachaExtraRequiredCount'] as num?)?.toInt() ?? 10,
      gamedataResetAt: (json['gamedataResetAt'] as num?)?.toInt() ?? 0,
      gameOverCommandSpellId: (json['gameOverCommandSpellId'] as num?)?.toInt() ?? 2,
      heroineChangecardvoice: (json['heroineChangecardvoice'] as num?)?.toInt() ?? 800104,
      hydeSvtId: (json['hydeSvtId'] as num?)?.toInt() ?? 600710,
      individualityIsSupport: (json['individualityIsSupport'] as num?)?.toInt() ?? 7000,
      isEventPointMenu: (json['isEventPointMenu'] as num?)?.toInt() ?? 1,
      isIosExamination: (json['isIosExamination'] as num?)?.toInt() ?? 0,
      itemIdQp: (json['itemIdQp'] as num?)?.toInt() ?? 1,
      jekyllSvtId: (json['jekyllSvtId'] as num?)?.toInt() ?? 600700,
      largeSuccessMultExp: (json['largeSuccessMultExp'] as num?)?.toInt() ?? 2000,
      largeSuccessRate: (json['largeSuccessRate'] as num?)?.toInt() ?? 100,
      lastWarId: (json['lastWarId'] as num?)?.toInt() ?? 403,
      limitedPeriodVoiceChangeType: (json['limitedPeriodVoiceChangeType'] as num?)?.toInt() ?? 0,
      limitedShopRemainDays: (json['limitedShopRemainDays'] as num?)?.toInt() ?? 1000,
      loginDay: (json['loginDay'] as num?)?.toInt() ?? 1459436400,
      loginResetAt: (json['loginResetAt'] as num?)?.toInt() ?? 4,
      mashuChangeQuestId: (json['mashuChangeQuestId'] as num?)?.toInt() ?? 1000501,
      mashuChangeWarId: (json['mashuChangeWarId'] as num?)?.toInt() ?? 105,
      mashuSvtId1: (json['mashuSvtId1'] as num?)?.toInt() ?? 800100,
      mashuSvtId2: (json['mashuSvtId2'] as num?)?.toInt() ?? 800101,
      mashuSvtId3: (json['mashuSvtId3'] as num?)?.toInt() ?? 800102,
      mashuTdGradeUpQuestId: (json['mashuTdGradeUpQuestId'] as num?)?.toInt() ?? 3001301,
      mashuTdGradeUpQuestPhase: (json['mashuTdGradeUpQuestPhase'] as num?)?.toInt() ?? 3,
      masterMissionAlertTime: (json['masterMissionAlertTime'] as num?)?.toInt() ?? 259200,
      masterMissionSvtId1: (json['masterMissionSvtId1'] as num?)?.toInt() ?? 9000001,
      maxBlackListNum: (json['maxBlackListNum'] as num?)?.toInt() ?? 50,
      maxCommandSpell: (json['maxCommandSpell'] as num?)?.toInt() ?? 3,
      maxDropFactor: (json['maxDropFactor'] as num?)?.toInt() ?? 1000,
      maxEventPoint: (json['maxEventPoint'] as num?)?.toInt() ?? 999999999,
      maxExpFactor: (json['maxExpFactor'] as num?)?.toInt() ?? 3000,
      maxFriendpoint: (json['maxFriendpoint'] as num?)?.toInt() ?? 999999999,
      maxFriendpointBoostItemDailyReceive: (json['maxFriendpointBoostItemDailyReceive'] as num?)?.toInt() ?? 100,
      maxFriendpointBoostItemUse: (json['maxFriendpointBoostItemUse'] as num?)?.toInt() ?? 3,
      maxFriendshipRank: (json['maxFriendshipRank'] as num?)?.toInt() ?? 5,
      maxFriendCode: (json['maxFriendCode'] as num?)?.toInt() ?? 999999999,
      maxFriendHistoryNum: (json['maxFriendHistoryNum'] as num?)?.toInt() ?? 100,
      maxFriendShipUpRatio: (json['maxFriendShipUpRatio'] as num?)?.toInt() ?? 3000,
      maxMana: (json['maxMana'] as num?)?.toInt() ?? 999999999,
      maxNearPresentOffsetNum: (json['maxNearPresentOffsetNum'] as num?)?.toInt() ?? 50,
      maxPresentBoxHistoryNum: (json['maxPresentBoxHistoryNum'] as num?)?.toInt() ?? 0,
      maxPresentBoxNum: (json['maxPresentBoxNum'] as num?)?.toInt() ?? 400,
      maxPresentReceiveNum: (json['maxPresentReceiveNum'] as num?)?.toInt() ?? 99,
      maxQp: (json['maxQp'] as num?)?.toInt() ?? 2000000000,
      maxQpDropUpRatio: (json['maxQpDropUpRatio'] as num?)?.toInt() ?? 3000,
      maxQpFactor: (json['maxQpFactor'] as num?)?.toInt() ?? 3000,
      maxRarePri: (json['maxRarePri'] as num?)?.toInt() ?? 999999999,
      maxRp: (json['maxRp'] as num?)?.toInt() ?? 8,
      maxStone: (json['maxStone'] as num?)?.toInt() ?? 999999999,
      maxUserCommandCode: (json['maxUserCommandCode'] as num?)?.toInt() ?? 450,
      maxUserEquipExpUpRatio: (json['maxUserEquipExpUpRatio'] as num?)?.toInt() ?? 3000,
      maxUserItem: (json['maxUserItem'] as num?)?.toInt() ?? 999999999,
      maxUserLv: (json['maxUserLv'] as num?)?.toInt() ?? 170,
      maxUserSvt: (json['maxUserSvt'] as num?)?.toInt() ?? 800,
      maxUserSvtEquip: (json['maxUserSvtEquip'] as num?)?.toInt() ?? 800,
      maxUserSvtEquipStorage: (json['maxUserSvtEquipStorage'] as num?)?.toInt() ?? 100,
      maxUserSvtStorage: (json['maxUserSvtStorage'] as num?)?.toInt() ?? 100,
      memoryDeckLimitByQuest: (json['memoryDeckLimitByQuest'] as num?)?.toInt() ?? 100,
      menuChange: (json['menuChange'] as num?)?.toInt() ?? 1,
      minLogicCancerLvUpProb: (json['minLogicCancerLvUpProb'] as num?)?.toInt() ?? 100,
      monthlyShopRemainDays: (json['monthlyShopRemainDays'] as num?)?.toInt() ?? 3,
      mstBuffIndvAddBuffActive: (json['mstBuffIndvAddBuffActive'] as num?)?.toInt() ?? 1,
      needRebootTime: (json['needRebootTime'] as num?)?.toInt() ?? 86400,
      nothinkAiactid: (json['nothinkAiactid'] as num?)?.toInt() ?? 1002,
      notChangeBehaviorTransformSvtId: (json['notChangeBehaviorTransformSvtId'] as num?)?.toInt() ?? 600700,
      notFriendPoint: (json['notFriendPoint'] as num?)?.toInt() ?? 10,
      npcFriendPoint: (json['npcFriendPoint'] as num?)?.toInt() ?? 200,
      npDoubleBurst: (json['npDoubleBurst'] as num?)?.toInt() ?? 1000,
      npTripleBurst: (json['npTripleBurst'] as num?)?.toInt() ?? 1500,
      oneAct: (json['oneAct'] as num?)?.toInt() ?? 300,
      oneCommandSpell: (json['oneCommandSpell'] as num?)?.toInt() ?? 86400,
      oneRp: (json['oneRp'] as num?)?.toInt() ?? 3600,
      otherImageLimitCount: (json['otherImageLimitCount'] as num?)?.toInt() ?? 10,
      overKillNpRate: (json['overKillNpRate'] as num?)?.toInt() ?? 1500,
      overKillStarAdd: (json['overKillStarAdd'] as num?)?.toInt() ?? 300,
      overKillStarRate: (json['overKillStarRate'] as num?)?.toInt() ?? 1000,
      perSameCommand: (json['perSameCommand'] as num?)?.toInt() ?? 0,
      presentValidTime: (json['presentValidTime'] as num?)?.toInt() ?? 31536000,
      prologueQuestId: (json['prologueQuestId'] as num?)?.toInt() ?? 1000000,
      qp: (json['qp'] as num?)?.toInt() ?? 0,
      questInfoFlagCombineMaterial: (json['questInfoFlagCombineMaterial'] as num?)?.toInt() ?? 0,
      questInfoFlagItem: (json['questInfoFlagItem'] as num?)?.toInt() ?? 0,
      questInfoFlagSvtEquip: (json['questInfoFlagSvtEquip'] as num?)?.toInt() ?? 0,
      raceAddPointBase: (json['raceAddPointBase'] as num?)?.toInt() ?? 2,
      raceRewardRankMax: (json['raceRewardRankMax'] as num?)?.toInt() ?? 3,
      raceTargetGoalRank: (json['raceTargetGoalRank'] as num?)?.toInt() ?? 3,
      raidDefeatedEffectTime: (json['raidDefeatedEffectTime'] as num?)?.toInt() ?? 0,
      raidMarkdispStep: (json['raidMarkdispStep'] as num?)?.toInt() ?? 4,
      raidTutorialQuestId: (json['raidTutorialQuestId'] as num?)?.toInt() ?? 94004504,
      recoveryValue: (json['recoveryValue'] as num?)?.toInt() ?? 2,
      requestRaidUpdateEventMap: (json['requestRaidUpdateEventMap'] as num?)?.toInt() ?? 60,
      requestTopHomeExpirationDateSecUpdateEventMap:
          (json['requestTopHomeExpirationDateSecUpdateEventMap'] as num?)?.toInt() ?? 900,
      retrievableQuestConfirmBoost: (json['retrievableQuestConfirmBoost'] as num?)?.toInt() ?? 1,
      revertBuffLowerLimit: (json['revertBuffLowerLimit'] as num?)?.toInt() ?? 1,
      sameClassMuliExp: (json['sameClassMuliExp'] as num?)?.toInt() ?? 1200,
      shop04ShopState: (json['shop04ShopState'] as num?)?.toInt() ?? 0,
      shopSpecialItemEnable: (json['shopSpecialItemEnable'] as num?)?.toInt() ?? 1,
      startingMemberFriendshipRate: (json['startingMemberFriendshipRate'] as num?)?.toInt() ?? 1200,
      starRateMax: (json['starRateMax'] as num?)?.toInt() ?? 3000,
      statusUpAdjustAtk: (json['statusUpAdjustAtk'] as num?)?.toInt() ?? 10,
      statusUpAdjustHp: (json['statusUpAdjustHp'] as num?)?.toInt() ?? 10,
      statusUpBuff: (json['statusUpBuff'] as num?)?.toInt() ?? 3004,
      superSuccessMultExp: (json['superSuccessMultExp'] as num?)?.toInt() ?? 3000,
      superSuccessRate: (json['superSuccessRate'] as num?)?.toInt() ?? 20,
      supportDeckMax: (json['supportDeckMax'] as num?)?.toInt() ?? 10,
      svtBackQuestId: (json['svtBackQuestId'] as num?)?.toInt() ?? 1000822,
      svtBackQuestPhase: (json['svtBackQuestPhase'] as num?)?.toInt() ?? 1,
      svtLeaveQuestId: (json['svtLeaveQuestId'] as num?)?.toInt() ?? 1000819,
      svtLeaveQuestPhase: (json['svtLeaveQuestPhase'] as num?)?.toInt() ?? 1,
      svtRecoveryNum: (json['svtRecoveryNum'] as num?)?.toInt() ?? 5,
      swimsuitMeltSvtId: (json['swimsuitMeltSvtId'] as num?)?.toInt() ?? 304000,
      tamamocatStunBuffId: (json['tamamocatStunBuffId'] as num?)?.toInt() ?? 178,
      tamamocatTreasureDeviceId1: (json['tamamocatTreasureDeviceId1'] as num?)?.toInt() ?? 701601,
      tamamocatTreasureDeviceId2: (json['tamamocatTreasureDeviceId2'] as num?)?.toInt() ?? 701602,
      temporaryIgnoreSleepModeForTreasureDeviceSvtId1:
          (json['temporaryIgnoreSleepModeForTreasureDeviceSvtId1'] as num?)?.toInt() ?? 500100,
      temporaryIgnoreSleepModeForTreasureDeviceSvtId2:
          (json['temporaryIgnoreSleepModeForTreasureDeviceSvtId2'] as num?)?.toInt() ?? 600900,
      timeStatusCondQuestId: (json['timeStatusCondQuestId'] as num?)?.toInt() ?? 94027502,
      titleFlowOld: (json['titleFlowOld'] as num?)?.toInt() ?? 0,
      treasuredeviceIdMashu3: (json['treasuredeviceIdMashu3'] as num?)?.toInt() ?? 800104,
      treasureDeviceDispStatusEffectFlag: (json['treasureDeviceDispStatusEffectFlag'] as num?)?.toInt() ?? 0,
      tutorialFavoriteQuestId: (json['tutorialFavoriteQuestId'] as num?)?.toInt() ?? 1000011,
      tutorialGachaId: (json['tutorialGachaId'] as num?)?.toInt() ?? 101,
      tutorialLabel1StAnniversarySvtKeepAdjust:
          (json['tutorialLabel1StAnniversarySvtKeepAdjust'] as num?)?.toInt() ?? 125,
      tutorialLabelBattleResultWinLose: (json['tutorialLabelBattleResultWinLose'] as num?)?.toInt() ?? 123,
      tutorialLabelCaldeaGate: (json['tutorialLabelCaldeaGate'] as num?)?.toInt() ?? 129,
      tutorialLabelChapter2Prologue: (json['tutorialLabelChapter2Prologue'] as num?)?.toInt() ?? 204,
      tutorialLabelCombine: (json['tutorialLabelCombine'] as num?)?.toInt() ?? 104,
      tutorialLabelDailyQuest: (json['tutorialLabelDailyQuest'] as num?)?.toInt() ?? 130,
      tutorialLabelDeck: (json['tutorialLabelDeck'] as num?)?.toInt() ?? 202,
      tutorialLabelDeck2: (json['tutorialLabelDeck2'] as num?)?.toInt() ?? 205,
      tutorialLabelDeckInSvtEquip: (json['tutorialLabelDeckInSvtEquip'] as num?)?.toInt() ?? 113,
      tutorialLabelDeckScene: (json['tutorialLabelDeckScene'] as num?)?.toInt() ?? 109,
      tutorialLabelDeckSvtEquip: (json['tutorialLabelDeckSvtEquip'] as num?)?.toInt() ?? 110,
      tutorialLabelEnd: (json['tutorialLabelEnd'] as num?)?.toInt() ?? 102,
      tutorialLabelEventGacha: (json['tutorialLabelEventGacha'] as num?)?.toInt() ?? 111,
      tutorialLabelEventMission: (json['tutorialLabelEventMission'] as num?)?.toInt() ?? 114,
      tutorialLabelEventReward: (json['tutorialLabelEventReward'] as num?)?.toInt() ?? 112,
      tutorialLabelFavorite1: (json['tutorialLabelFavorite1'] as num?)?.toInt() ?? 105,
      tutorialLabelFavorite2: (json['tutorialLabelFavorite2'] as num?)?.toInt() ?? 106,
      tutorialLabelFes: (json['tutorialLabelFes'] as num?)?.toInt() ?? 127,
      tutorialLabelFixCostume: (json['tutorialLabelFixCostume'] as num?)?.toInt() ?? 206,
      tutorialLabelFreindStoryQuest: (json['tutorialLabelFreindStoryQuest'] as num?)?.toInt() ?? 131,
      tutorialLabelGachaScene: (json['tutorialLabelGachaScene'] as num?)?.toInt() ?? 107,
      tutorialLabelGachaSvtEquip: (json['tutorialLabelGachaSvtEquip'] as num?)?.toInt() ?? 108,
      tutorialLabelIbarakiRaidBattle: (json['tutorialLabelIbarakiRaidBattle'] as num?)?.toInt() ?? 117,
      tutorialLabelIbarakiRaidEventReward: (json['tutorialLabelIbarakiRaidEventReward'] as num?)?.toInt() ?? 118,
      tutorialLabelIbarakiRaidTerminal: (json['tutorialLabelIbarakiRaidTerminal'] as num?)?.toInt() ?? 116,
      tutorialLabelMashuChange: (json['tutorialLabelMashuChange'] as num?)?.toInt() ?? 115,
      tutorialLabelMasterMission: (json['tutorialLabelMasterMission'] as num?)?.toInt() ?? 207,
      tutorialLabelMyroom: (json['tutorialLabelMyroom'] as num?)?.toInt() ?? 128,
      tutorialLabelOnigashimaLoginGift: (json['tutorialLabelOnigashimaLoginGift'] as num?)?.toInt() ?? 124,
      tutorialLabelPresentBox: (json['tutorialLabelPresentBox'] as num?)?.toInt() ?? 201,
      tutorialLabelRaid2Battle: (json['tutorialLabelRaid2Battle'] as num?)?.toInt() ?? 120,
      tutorialLabelRaid2Battle2: (json['tutorialLabelRaid2Battle2'] as num?)?.toInt() ?? 122,
      tutorialLabelRaid2EventReward: (json['tutorialLabelRaid2EventReward'] as num?)?.toInt() ?? 121,
      tutorialLabelRaid2Map: (json['tutorialLabelRaid2Map'] as num?)?.toInt() ?? 119,
      tutorialLabelShop: (json['tutorialLabelShop'] as num?)?.toInt() ?? 103,
      tutorialLabelStoneGacha: (json['tutorialLabelStoneGacha'] as num?)?.toInt() ?? 101,
      tutorialLabelSvtLeave: (json['tutorialLabelSvtLeave'] as num?)?.toInt() ?? 126,
      tutorialMizugiCultivQuestId: (json['tutorialMizugiCultivQuestId'] as num?)?.toInt() ?? 94005701,
      tutorialMizugiMapId: (json['tutorialMizugiMapId'] as num?)?.toInt() ?? 9005,
      tutorialMizugiResetQuestId: (json['tutorialMizugiResetQuestId'] as num?)?.toInt() ?? 94005891,
      tutorialNpcSvtId1: (json['tutorialNpcSvtId1'] as num?)?.toInt() ?? 1,
      tutorialNpcSvtId2: (json['tutorialNpcSvtId2'] as num?)?.toInt() ?? 2,
      tutorialNpcSvtId3: (json['tutorialNpcSvtId3'] as num?)?.toInt() ?? 3,
      tutorialQuestId1: (json['tutorialQuestId1'] as num?)?.toInt() ?? 1000000,
      tutorialQuestId2: (json['tutorialQuestId2'] as num?)?.toInt() ?? 1000001,
      tutorialQuestId3: (json['tutorialQuestId3'] as num?)?.toInt() ?? 1000002,
      tutorialQuestId4: (json['tutorialQuestId4'] as num?)?.toInt() ?? 1000003,
      tutorialQuestId4Phase: (json['tutorialQuestId4Phase'] as num?)?.toInt() ?? 1,
      tutorialSupportQuestId: (json['tutorialSupportQuestId'] as num?)?.toInt() ?? 1000006,
      tutorialSupportQuestPhase: (json['tutorialSupportQuestPhase'] as num?)?.toInt() ?? 2,
      userAct: (json['userAct'] as num?)?.toInt() ?? 20,
      userCost: (json['userCost'] as num?)?.toInt() ?? 56,
      userFreeStone: (json['userFreeStone'] as num?)?.toInt() ?? 30,
      userFriendPoint: (json['userFriendPoint'] as num?)?.toInt() ?? 0,
      userOrderCnt: (json['userOrderCnt'] as num?)?.toInt() ?? 3,
      userStartId: (json['userStartId'] as num?)?.toInt() ?? 1000001,
      userSvt: (json['userSvt'] as num?)?.toInt() ?? 50,
      userSvtEquip: (json['userSvtEquip'] as num?)?.toInt() ?? 50,
      valentineReleaseAt: (json['valentineReleaseAt'] as num?)?.toInt() ?? 1455080400,
      warboardMaxServantCacheCount: (json['warboardMaxServantCacheCount'] as num?)?.toInt() ?? 0,
      warboardMiddleMemoryServantCacheCount: (json['warboardMiddleMemoryServantCacheCount'] as num?)?.toInt() ?? 0,
      warBoardBattleEndReduceBuffTurnFlag: (json['warBoardBattleEndReduceBuffTurnFlag'] as num?)?.toInt() ?? 1,
      warBoardBattleLoseBgm: (json['warBoardBattleLoseBgm'] as num?)?.toInt() ?? 0,
    );

Map<String, dynamic> _$GameConstantsToJson(GameConstants instance) => <String, dynamic>{
      'k20220731BoostRate1': instance.k20220731BoostRate1,
      'accountingInitializeTimeout': instance.accountingInitializeTimeout,
      'aftreChangeFreeDrawNum': instance.aftreChangeFreeDrawNum,
      'attackRate': instance.attackRate,
      'attackRateRandomMax': instance.attackRateRandomMax,
      'attackRateRandomMin': instance.attackRateRandomMin,
      'backsideClassImageId': instance.backsideClassImageId,
      'backsideSvtEquipImageId': instance.backsideSvtEquipImageId,
      'backsideSvtImageId': instance.backsideSvtImageId,
      'battleEffectId3003001': instance.battleEffectId3003001,
      'battleEffectIdAvoidance': instance.battleEffectIdAvoidance,
      'battleEffectIdAvoidancePierce': instance.battleEffectIdAvoidancePierce,
      'battleEffectIdInvincible': instance.battleEffectIdInvincible,
      'battleEffectIdInvinciblePierce': instance.battleEffectIdInvinciblePierce,
      'battleEffectIdSpecialInvincible': instance.battleEffectIdSpecialInvincible,
      'battleItemDispColumn': instance.battleItemDispColumn,
      'battleMsgBaseTime': instance.battleMsgBaseTime,
      'battleMsgInterval': instance.battleMsgInterval,
      'battleTimePerChara': instance.battleTimePerChara,
      'beforeChangeFreeDrawNum': instance.beforeChangeFreeDrawNum,
      'bpExpression': instance.bpExpression,
      'campaignResetAt': instance.campaignResetAt,
      'canSelectSvtMaterialFlag': instance.canSelectSvtMaterialFlag,
      'chainbonusArtsRate': instance.chainbonusArtsRate,
      'chainbonusBusterRate': instance.chainbonusBusterRate,
      'chainbonusQuick': instance.chainbonusQuick,
      'chapter1PrologueWarId': instance.chapter1PrologueWarId,
      'chapter2EpilogueWarId': instance.chapter2EpilogueWarId,
      'chapter2PrologueWarId': instance.chapter2PrologueWarId,
      'chapterFEndId': instance.chapterFEndId,
      'chapterFStartId': instance.chapterFStartId,
      'classBoardReleaseQuestId': instance.classBoardReleaseQuestId,
      'closeSecretTreasureDeviceQuestClear': instance.closeSecretTreasureDeviceQuestClear,
      'closeSecretTreasureDeviceSvtGet': instance.closeSecretTreasureDeviceSvtGet,
      'coinRoomGet': instance.coinRoomGet,
      'coinRoomMax': instance.coinRoomMax,
      'coinRoomMaxNum': instance.coinRoomMaxNum,
      'coinRoomReleaseQuestId': instance.coinRoomReleaseQuestId,
      'combineLimitSpecialPrivilegeId': instance.combineLimitSpecialPrivilegeId,
      'comebackTargetDay': instance.comebackTargetDay,
      'commandArts': instance.commandArts,
      'commandBuster': instance.commandBuster,
      'commandCardPrmUpMax': instance.commandCardPrmUpMax,
      'commandCodeDetachingItemId': instance.commandCodeDetachingItemId,
      'commandQuick': instance.commandQuick,
      'commandSpellRecoverAt': instance.commandSpellRecoverAt,
      'convertDeckUserEquipAt': instance.convertDeckUserEquipAt,
      'criticalAttackRate': instance.criticalAttackRate,
      'criticalIndividuality': instance.criticalIndividuality,
      'criticalRatePerStar': instance.criticalRatePerStar,
      'criticalStarRate': instance.criticalStarRate,
      'criticalTdPointRate': instance.criticalTdPointRate,
      'deckMax': instance.deckMax,
      'defaultLockBoardGroupId': instance.defaultLockBoardGroupId,
      'disableFriendshipExceed': instance.disableFriendshipExceed,
      'disableServantEffectFilter': instance.disableServantEffectFilter,
      'enableApRecover': instance.enableApRecover,
      'enablePresentHistory': instance.enablePresentHistory,
      'enableSerialCode': instance.enableSerialCode,
      'enemyAttackRateArts': instance.enemyAttackRateArts,
      'enemyAttackRateBuster': instance.enemyAttackRateBuster,
      'enemyAttackRateQuick': instance.enemyAttackRateQuick,
      'enemyMaxBattleCount': instance.enemyMaxBattleCount,
      'equipGetEffectId': instance.equipGetEffectId,
      'eventBoardGameMapPosition': instance.eventBoardGameMapPosition,
      'eventBoardGameNextBoardQuestId': instance.eventBoardGameNextBoardQuestId,
      'eventBoardGameNextRoundQuestId': instance.eventBoardGameNextRoundQuestId,
      'eventDailyPointResetAt': instance.eventDailyPointResetAt,
      'eventIdRaid1': instance.eventIdRaid1,
      'eventIdRaid2': instance.eventIdRaid2,
      'eventItemPanelType': instance.eventItemPanelType,
      'eventRewardMuteSvtId109820770': instance.eventRewardMuteSvtId109820770,
      'eventRewardMuteSvtId109823880': instance.eventRewardMuteSvtId109823880,
      'eventTowerFadeoutPlayTime': instance.eventTowerFadeoutPlayTime,
      'eventTowerProgressQuest1': instance.eventTowerProgressQuest1,
      'eventTowerProgressQuest2': instance.eventTowerProgressQuest2,
      'expirationDate': instance.expirationDate,
      'extendFriendValue': instance.extendFriendValue,
      'extendSvtEquipValue': instance.extendSvtEquipValue,
      'extendSvtValue': instance.extendSvtValue,
      'extraAttackRateGrand': instance.extraAttackRateGrand,
      'extraAttackRateSingle': instance.extraAttackRateSingle,
      'extraCriticalRate': instance.extraCriticalRate,
      'fesWarId': instance.fesWarId,
      'firstEquipId': instance.firstEquipId,
      'fixEventSupportDeckNum': instance.fixEventSupportDeckNum,
      'fixMainSupportDeckNum': instance.fixMainSupportDeckNum,
      'flag20200805': instance.flag20200805,
      'flag20210801': instance.flag20210801,
      'flag20211217': instance.flag20211217,
      'flag20220101': instance.flag20220101,
      'flag20220119': instance.flag20220119,
      'flag20220511': instance.flag20220511,
      'flag20220730': instance.flag20220730,
      'flag20230402': instance.flag20230402,
      'flag20230730': instance.flag20230730,
      'flagCineraria4': instance.flagCineraria4,
      'followerListExpireAt': instance.followerListExpireAt,
      'followerRefreshResetTime': instance.followerRefreshResetTime,
      'followFriendPoint': instance.followFriendPoint,
      'followNum': instance.followNum,
      'fourPillars': instance.fourPillars,
      'freeDrawNumChangeAt': instance.freeDrawNumChangeAt,
      'freeGachaResetAt': instance.freeGachaResetAt,
      'friendpointBoostItemEffectId': instance.friendpointBoostItemEffectId,
      'friendGachaAddLimit': instance.friendGachaAddLimit,
      'friendGachaCommandCodeAddLimit': instance.friendGachaCommandCodeAddLimit,
      'friendNum': instance.friendNum,
      'friendOfferedNum': instance.friendOfferedNum,
      'friendPoint': instance.friendPoint,
      'fullTdPoint': instance.fullTdPoint,
      'gachaDailyMaxDrawNumResetAt': instance.gachaDailyMaxDrawNumResetAt,
      'gachaExtraRequiredCount': instance.gachaExtraRequiredCount,
      'gamedataResetAt': instance.gamedataResetAt,
      'gameOverCommandSpellId': instance.gameOverCommandSpellId,
      'heroineChangecardvoice': instance.heroineChangecardvoice,
      'hydeSvtId': instance.hydeSvtId,
      'individualityIsSupport': instance.individualityIsSupport,
      'isEventPointMenu': instance.isEventPointMenu,
      'isIosExamination': instance.isIosExamination,
      'itemIdQp': instance.itemIdQp,
      'jekyllSvtId': instance.jekyllSvtId,
      'largeSuccessMultExp': instance.largeSuccessMultExp,
      'largeSuccessRate': instance.largeSuccessRate,
      'lastWarId': instance.lastWarId,
      'limitedPeriodVoiceChangeType': instance.limitedPeriodVoiceChangeType,
      'limitedShopRemainDays': instance.limitedShopRemainDays,
      'loginDay': instance.loginDay,
      'loginResetAt': instance.loginResetAt,
      'mashuChangeQuestId': instance.mashuChangeQuestId,
      'mashuChangeWarId': instance.mashuChangeWarId,
      'mashuSvtId1': instance.mashuSvtId1,
      'mashuSvtId2': instance.mashuSvtId2,
      'mashuSvtId3': instance.mashuSvtId3,
      'mashuTdGradeUpQuestId': instance.mashuTdGradeUpQuestId,
      'mashuTdGradeUpQuestPhase': instance.mashuTdGradeUpQuestPhase,
      'masterMissionAlertTime': instance.masterMissionAlertTime,
      'masterMissionSvtId1': instance.masterMissionSvtId1,
      'maxBlackListNum': instance.maxBlackListNum,
      'maxCommandSpell': instance.maxCommandSpell,
      'maxDropFactor': instance.maxDropFactor,
      'maxEventPoint': instance.maxEventPoint,
      'maxExpFactor': instance.maxExpFactor,
      'maxFriendpoint': instance.maxFriendpoint,
      'maxFriendpointBoostItemDailyReceive': instance.maxFriendpointBoostItemDailyReceive,
      'maxFriendpointBoostItemUse': instance.maxFriendpointBoostItemUse,
      'maxFriendshipRank': instance.maxFriendshipRank,
      'maxFriendCode': instance.maxFriendCode,
      'maxFriendHistoryNum': instance.maxFriendHistoryNum,
      'maxFriendShipUpRatio': instance.maxFriendShipUpRatio,
      'maxMana': instance.maxMana,
      'maxNearPresentOffsetNum': instance.maxNearPresentOffsetNum,
      'maxPresentBoxHistoryNum': instance.maxPresentBoxHistoryNum,
      'maxPresentBoxNum': instance.maxPresentBoxNum,
      'maxPresentReceiveNum': instance.maxPresentReceiveNum,
      'maxQp': instance.maxQp,
      'maxQpDropUpRatio': instance.maxQpDropUpRatio,
      'maxQpFactor': instance.maxQpFactor,
      'maxRarePri': instance.maxRarePri,
      'maxRp': instance.maxRp,
      'maxStone': instance.maxStone,
      'maxUserCommandCode': instance.maxUserCommandCode,
      'maxUserEquipExpUpRatio': instance.maxUserEquipExpUpRatio,
      'maxUserItem': instance.maxUserItem,
      'maxUserLv': instance.maxUserLv,
      'maxUserSvt': instance.maxUserSvt,
      'maxUserSvtEquip': instance.maxUserSvtEquip,
      'maxUserSvtEquipStorage': instance.maxUserSvtEquipStorage,
      'maxUserSvtStorage': instance.maxUserSvtStorage,
      'memoryDeckLimitByQuest': instance.memoryDeckLimitByQuest,
      'menuChange': instance.menuChange,
      'minLogicCancerLvUpProb': instance.minLogicCancerLvUpProb,
      'monthlyShopRemainDays': instance.monthlyShopRemainDays,
      'mstBuffIndvAddBuffActive': instance.mstBuffIndvAddBuffActive,
      'needRebootTime': instance.needRebootTime,
      'nothinkAiactid': instance.nothinkAiactid,
      'notChangeBehaviorTransformSvtId': instance.notChangeBehaviorTransformSvtId,
      'notFriendPoint': instance.notFriendPoint,
      'npcFriendPoint': instance.npcFriendPoint,
      'npDoubleBurst': instance.npDoubleBurst,
      'npTripleBurst': instance.npTripleBurst,
      'oneAct': instance.oneAct,
      'oneCommandSpell': instance.oneCommandSpell,
      'oneRp': instance.oneRp,
      'otherImageLimitCount': instance.otherImageLimitCount,
      'overKillNpRate': instance.overKillNpRate,
      'overKillStarAdd': instance.overKillStarAdd,
      'overKillStarRate': instance.overKillStarRate,
      'perSameCommand': instance.perSameCommand,
      'presentValidTime': instance.presentValidTime,
      'prologueQuestId': instance.prologueQuestId,
      'qp': instance.qp,
      'questInfoFlagCombineMaterial': instance.questInfoFlagCombineMaterial,
      'questInfoFlagItem': instance.questInfoFlagItem,
      'questInfoFlagSvtEquip': instance.questInfoFlagSvtEquip,
      'raceAddPointBase': instance.raceAddPointBase,
      'raceRewardRankMax': instance.raceRewardRankMax,
      'raceTargetGoalRank': instance.raceTargetGoalRank,
      'raidDefeatedEffectTime': instance.raidDefeatedEffectTime,
      'raidMarkdispStep': instance.raidMarkdispStep,
      'raidTutorialQuestId': instance.raidTutorialQuestId,
      'recoveryValue': instance.recoveryValue,
      'requestRaidUpdateEventMap': instance.requestRaidUpdateEventMap,
      'requestTopHomeExpirationDateSecUpdateEventMap': instance.requestTopHomeExpirationDateSecUpdateEventMap,
      'retrievableQuestConfirmBoost': instance.retrievableQuestConfirmBoost,
      'revertBuffLowerLimit': instance.revertBuffLowerLimit,
      'sameClassMuliExp': instance.sameClassMuliExp,
      'shop04ShopState': instance.shop04ShopState,
      'shopSpecialItemEnable': instance.shopSpecialItemEnable,
      'startingMemberFriendshipRate': instance.startingMemberFriendshipRate,
      'starRateMax': instance.starRateMax,
      'statusUpAdjustAtk': instance.statusUpAdjustAtk,
      'statusUpAdjustHp': instance.statusUpAdjustHp,
      'statusUpBuff': instance.statusUpBuff,
      'superSuccessMultExp': instance.superSuccessMultExp,
      'superSuccessRate': instance.superSuccessRate,
      'supportDeckMax': instance.supportDeckMax,
      'svtBackQuestId': instance.svtBackQuestId,
      'svtBackQuestPhase': instance.svtBackQuestPhase,
      'svtLeaveQuestId': instance.svtLeaveQuestId,
      'svtLeaveQuestPhase': instance.svtLeaveQuestPhase,
      'svtRecoveryNum': instance.svtRecoveryNum,
      'swimsuitMeltSvtId': instance.swimsuitMeltSvtId,
      'tamamocatStunBuffId': instance.tamamocatStunBuffId,
      'tamamocatTreasureDeviceId1': instance.tamamocatTreasureDeviceId1,
      'tamamocatTreasureDeviceId2': instance.tamamocatTreasureDeviceId2,
      'temporaryIgnoreSleepModeForTreasureDeviceSvtId1': instance.temporaryIgnoreSleepModeForTreasureDeviceSvtId1,
      'temporaryIgnoreSleepModeForTreasureDeviceSvtId2': instance.temporaryIgnoreSleepModeForTreasureDeviceSvtId2,
      'timeStatusCondQuestId': instance.timeStatusCondQuestId,
      'titleFlowOld': instance.titleFlowOld,
      'treasuredeviceIdMashu3': instance.treasuredeviceIdMashu3,
      'treasureDeviceDispStatusEffectFlag': instance.treasureDeviceDispStatusEffectFlag,
      'tutorialFavoriteQuestId': instance.tutorialFavoriteQuestId,
      'tutorialGachaId': instance.tutorialGachaId,
      'tutorialLabel1StAnniversarySvtKeepAdjust': instance.tutorialLabel1StAnniversarySvtKeepAdjust,
      'tutorialLabelBattleResultWinLose': instance.tutorialLabelBattleResultWinLose,
      'tutorialLabelCaldeaGate': instance.tutorialLabelCaldeaGate,
      'tutorialLabelChapter2Prologue': instance.tutorialLabelChapter2Prologue,
      'tutorialLabelCombine': instance.tutorialLabelCombine,
      'tutorialLabelDailyQuest': instance.tutorialLabelDailyQuest,
      'tutorialLabelDeck': instance.tutorialLabelDeck,
      'tutorialLabelDeck2': instance.tutorialLabelDeck2,
      'tutorialLabelDeckInSvtEquip': instance.tutorialLabelDeckInSvtEquip,
      'tutorialLabelDeckScene': instance.tutorialLabelDeckScene,
      'tutorialLabelDeckSvtEquip': instance.tutorialLabelDeckSvtEquip,
      'tutorialLabelEnd': instance.tutorialLabelEnd,
      'tutorialLabelEventGacha': instance.tutorialLabelEventGacha,
      'tutorialLabelEventMission': instance.tutorialLabelEventMission,
      'tutorialLabelEventReward': instance.tutorialLabelEventReward,
      'tutorialLabelFavorite1': instance.tutorialLabelFavorite1,
      'tutorialLabelFavorite2': instance.tutorialLabelFavorite2,
      'tutorialLabelFes': instance.tutorialLabelFes,
      'tutorialLabelFixCostume': instance.tutorialLabelFixCostume,
      'tutorialLabelFreindStoryQuest': instance.tutorialLabelFreindStoryQuest,
      'tutorialLabelGachaScene': instance.tutorialLabelGachaScene,
      'tutorialLabelGachaSvtEquip': instance.tutorialLabelGachaSvtEquip,
      'tutorialLabelIbarakiRaidBattle': instance.tutorialLabelIbarakiRaidBattle,
      'tutorialLabelIbarakiRaidEventReward': instance.tutorialLabelIbarakiRaidEventReward,
      'tutorialLabelIbarakiRaidTerminal': instance.tutorialLabelIbarakiRaidTerminal,
      'tutorialLabelMashuChange': instance.tutorialLabelMashuChange,
      'tutorialLabelMasterMission': instance.tutorialLabelMasterMission,
      'tutorialLabelMyroom': instance.tutorialLabelMyroom,
      'tutorialLabelOnigashimaLoginGift': instance.tutorialLabelOnigashimaLoginGift,
      'tutorialLabelPresentBox': instance.tutorialLabelPresentBox,
      'tutorialLabelRaid2Battle': instance.tutorialLabelRaid2Battle,
      'tutorialLabelRaid2Battle2': instance.tutorialLabelRaid2Battle2,
      'tutorialLabelRaid2EventReward': instance.tutorialLabelRaid2EventReward,
      'tutorialLabelRaid2Map': instance.tutorialLabelRaid2Map,
      'tutorialLabelShop': instance.tutorialLabelShop,
      'tutorialLabelStoneGacha': instance.tutorialLabelStoneGacha,
      'tutorialLabelSvtLeave': instance.tutorialLabelSvtLeave,
      'tutorialMizugiCultivQuestId': instance.tutorialMizugiCultivQuestId,
      'tutorialMizugiMapId': instance.tutorialMizugiMapId,
      'tutorialMizugiResetQuestId': instance.tutorialMizugiResetQuestId,
      'tutorialNpcSvtId1': instance.tutorialNpcSvtId1,
      'tutorialNpcSvtId2': instance.tutorialNpcSvtId2,
      'tutorialNpcSvtId3': instance.tutorialNpcSvtId3,
      'tutorialQuestId1': instance.tutorialQuestId1,
      'tutorialQuestId2': instance.tutorialQuestId2,
      'tutorialQuestId3': instance.tutorialQuestId3,
      'tutorialQuestId4': instance.tutorialQuestId4,
      'tutorialQuestId4Phase': instance.tutorialQuestId4Phase,
      'tutorialSupportQuestId': instance.tutorialSupportQuestId,
      'tutorialSupportQuestPhase': instance.tutorialSupportQuestPhase,
      'userAct': instance.userAct,
      'userCost': instance.userCost,
      'userFreeStone': instance.userFreeStone,
      'userFriendPoint': instance.userFriendPoint,
      'userOrderCnt': instance.userOrderCnt,
      'userStartId': instance.userStartId,
      'userSvt': instance.userSvt,
      'userSvtEquip': instance.userSvtEquip,
      'valentineReleaseAt': instance.valentineReleaseAt,
      'warboardMaxServantCacheCount': instance.warboardMaxServantCacheCount,
      'warboardMiddleMemoryServantCacheCount': instance.warboardMiddleMemoryServantCacheCount,
      'warBoardBattleEndReduceBuffTurnFlag': instance.warBoardBattleEndReduceBuffTurnFlag,
      'warBoardBattleLoseBgm': instance.warBoardBattleLoseBgm,
    };

GameConstantStr _$GameConstantStrFromJson(Map json) => GameConstantStr(
      extendTurnBuffType: (json['extendTurnBuffType'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ??
          const [1, 9, 11, 13, 15, 18, 25, 50, 51, 52, 70, 72, 89, 90, 110, 112, 116, 121, 137, 144, 148, 160, 162],
      invalidSacrificeIndiv:
          (json['invalidSacrificeIndiv'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [3076],
      notReduceCountWithNoDamageBuff:
          (json['notReduceCountWithNoDamageBuff'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ??
              const [42, 21, 23, 91, 105, 196],
      starRefreshBuffType:
          (json['starRefreshBuffType'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [2, 61],
      subPtBuffIndivi:
          (json['subPtBuffIndivi'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [3055],
      svtExitPtBuffIndivi:
          (json['svtExitPtBuffIndivi'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [3069],
    );

Map<String, dynamic> _$GameConstantStrToJson(GameConstantStr instance) => <String, dynamic>{
      'extendTurnBuffType': instance.extendTurnBuffType,
      'invalidSacrificeIndiv': instance.invalidSacrificeIndiv,
      'notReduceCountWithNoDamageBuff': instance.notReduceCountWithNoDamageBuff,
      'starRefreshBuffType': instance.starRefreshBuffType,
      'subPtBuffIndivi': instance.subPtBuffIndivi,
      'svtExitPtBuffIndivi': instance.svtExitPtBuffIndivi,
    };

SvtLimitHide _$SvtLimitHideFromJson(Map json) => SvtLimitHide(
      limits: (json['limits'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
      tds: (json['tds'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
      activeSkills: (json['activeSkills'] as Map?)?.map(
            (k, e) => MapEntry(int.parse(k as String), (e as List<dynamic>).map((e) => (e as num).toInt()).toList()),
          ) ??
          const {},
      classPassives: (json['classPassives'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
      addPassives: (json['addPassives'] as List<dynamic>?)?.map((e) => (e as num).toInt()).toList() ?? const [],
    );

Map<String, dynamic> _$SvtLimitHideToJson(SvtLimitHide instance) => <String, dynamic>{
      'limits': instance.limits,
      'tds': instance.tds,
      'activeSkills': instance.activeSkills.map((k, e) => MapEntry(k.toString(), e)),
      'classPassives': instance.classPassives,
      'addPassives': instance.addPassives,
    };

const _$BuffActionEnumMap = {
  BuffAction.unknown: 'unknown',
  BuffAction.none: 'none',
  BuffAction.commandAtk: 'commandAtk',
  BuffAction.commandDef: 'commandDef',
  BuffAction.atk: 'atk',
  BuffAction.defence: 'defence',
  BuffAction.defencePierce: 'defencePierce',
  BuffAction.specialdefence: 'specialdefence',
  BuffAction.damage: 'damage',
  BuffAction.damageIndividuality: 'damageIndividuality',
  BuffAction.damageIndividualityActiveonly: 'damageIndividualityActiveonly',
  BuffAction.selfdamage: 'selfdamage',
  BuffAction.criticalDamage: 'criticalDamage',
  BuffAction.npdamage: 'npdamage',
  BuffAction.givenDamage: 'givenDamage',
  BuffAction.receiveDamage: 'receiveDamage',
  BuffAction.pierceInvincible: 'pierceInvincible',
  BuffAction.invincible: 'invincible',
  BuffAction.breakAvoidance: 'breakAvoidance',
  BuffAction.avoidance: 'avoidance',
  BuffAction.overwriteBattleclass: 'overwriteBattleclass',
  BuffAction.overwriteClassrelatioAtk: 'overwriteClassrelatioAtk',
  BuffAction.overwriteClassrelatioDef: 'overwriteClassrelatioDef',
  BuffAction.commandNpAtk: 'commandNpAtk',
  BuffAction.commandNpDef: 'commandNpDef',
  BuffAction.dropNp: 'dropNp',
  BuffAction.dropNpDamage: 'dropNpDamage',
  BuffAction.commandStarAtk: 'commandStarAtk',
  BuffAction.commandStarDef: 'commandStarDef',
  BuffAction.criticalPoint: 'criticalPoint',
  BuffAction.starweight: 'starweight',
  BuffAction.turnendNp: 'turnendNp',
  BuffAction.turnendStar: 'turnendStar',
  BuffAction.turnendHpRegain: 'turnendHpRegain',
  BuffAction.turnendHpReduce: 'turnendHpReduce',
  BuffAction.gainHp: 'gainHp',
  BuffAction.turnvalNp: 'turnvalNp',
  BuffAction.grantState: 'grantState',
  BuffAction.resistanceState: 'resistanceState',
  BuffAction.avoidState: 'avoidState',
  BuffAction.donotAct: 'donotAct',
  BuffAction.donotSkill: 'donotSkill',
  BuffAction.donotNoble: 'donotNoble',
  BuffAction.donotRecovery: 'donotRecovery',
  BuffAction.individualityAdd: 'individualityAdd',
  BuffAction.individualitySub: 'individualitySub',
  BuffAction.hate: 'hate',
  BuffAction.criticalRate: 'criticalRate',
  BuffAction.avoidInstantdeath: 'avoidInstantdeath',
  BuffAction.resistInstantdeath: 'resistInstantdeath',
  BuffAction.nonresistInstantdeath: 'nonresistInstantdeath',
  BuffAction.regainNpUsedNoble: 'regainNpUsedNoble',
  BuffAction.functionDead: 'functionDead',
  BuffAction.maxhpRate: 'maxhpRate',
  BuffAction.maxhpValue: 'maxhpValue',
  BuffAction.functionWavestart: 'functionWavestart',
  BuffAction.functionSelfturnend: 'functionSelfturnend',
  BuffAction.giveGainHp: 'giveGainHp',
  BuffAction.functionCommandattackAfter: 'functionCommandattackAfter',
  BuffAction.functionDeadattack: 'functionDeadattack',
  BuffAction.functionEntry: 'functionEntry',
  BuffAction.chagetd: 'chagetd',
  BuffAction.grantSubstate: 'grantSubstate',
  BuffAction.toleranceSubstate: 'toleranceSubstate',
  BuffAction.grantInstantdeath: 'grantInstantdeath',
  BuffAction.functionDamage: 'functionDamage',
  BuffAction.functionReflection: 'functionReflection',
  BuffAction.multiattack: 'multiattack',
  BuffAction.giveNp: 'giveNp',
  BuffAction.resistanceDelayNpturn: 'resistanceDelayNpturn',
  BuffAction.pierceDefence: 'pierceDefence',
  BuffAction.gutsHp: 'gutsHp',
  BuffAction.funcgainNp: 'funcgainNp',
  BuffAction.funcHpReduce: 'funcHpReduce',
  BuffAction.functionNpattack: 'functionNpattack',
  BuffAction.fixCommandcard: 'fixCommandcard',
  BuffAction.donotGainnp: 'donotGainnp',
  BuffAction.fieldIndividuality: 'fieldIndividuality',
  BuffAction.donotActCommandtype: 'donotActCommandtype',
  BuffAction.damageEventPoint: 'damageEventPoint',
  BuffAction.damageSpecial: 'damageSpecial',
  BuffAction.functionAttackAfter: 'functionAttackAfter',
  BuffAction.functionCommandcodeattackBefore: 'functionCommandcodeattackBefore',
  BuffAction.donotNobleCondMismatch: 'donotNobleCondMismatch',
  BuffAction.donotSelectCommandcard: 'donotSelectCommandcard',
  BuffAction.donotReplace: 'donotReplace',
  BuffAction.shortenUserEquipSkill: 'shortenUserEquipSkill',
  BuffAction.tdTypeChange: 'tdTypeChange',
  BuffAction.overwriteClassRelation: 'overwriteClassRelation',
  BuffAction.functionCommandattackBefore: 'functionCommandattackBefore',
  BuffAction.functionGuts: 'functionGuts',
  BuffAction.criticalRateDamageTaken: 'criticalRateDamageTaken',
  BuffAction.criticalStarDamageTaken: 'criticalStarDamageTaken',
  BuffAction.skillRankChange: 'skillRankChange',
  BuffAction.avoidanceIndividuality: 'avoidanceIndividuality',
  BuffAction.changeCommandCardType: 'changeCommandCardType',
  BuffAction.specialInvincible: 'specialInvincible',
  BuffAction.preventDeathByDamage: 'preventDeathByDamage',
  BuffAction.functionCommandcodeattackAfter: 'functionCommandcodeattackAfter',
  BuffAction.functionAttackBefore: 'functionAttackBefore',
  BuffAction.donotSkillSelect: 'donotSkillSelect',
  BuffAction.invisibleBattleChara: 'invisibleBattleChara',
  BuffAction.buffRate: 'buffRate',
  BuffAction.counterFunction: 'counterFunction',
  BuffAction.notTargetSkill: 'notTargetSkill',
  BuffAction.toFieldChangeField: 'toFieldChangeField',
  BuffAction.toFieldAvoidBuff: 'toFieldAvoidBuff',
  BuffAction.grantStateUpOnly: 'grantStateUpOnly',
  BuffAction.turnendHpReduceToRegain: 'turnendHpReduceToRegain',
  BuffAction.functionSelfturnstart: 'functionSelfturnstart',
  BuffAction.overwriteDeadType: 'overwriteDeadType',
  BuffAction.actionCount: 'actionCount',
  BuffAction.shiftGuts: 'shiftGuts',
  BuffAction.toFieldSubIndividualityField: 'toFieldSubIndividualityField',
  BuffAction.masterSkillValueUp: 'masterSkillValueUp',
  BuffAction.buffConvert: 'buffConvert',
  BuffAction.subFieldIndividuality: 'subFieldIndividuality',
  BuffAction.functionCommandcodeattackBeforeMainOnly: 'functionCommandcodeattackBeforeMainOnly',
  BuffAction.functionCommandcodeattackAfterMainOnly: 'functionCommandcodeattackAfterMainOnly',
  BuffAction.functionCommandattackBeforeMainOnly: 'functionCommandattackBeforeMainOnly',
  BuffAction.functionCommandattackAfterMainOnly: 'functionCommandattackAfterMainOnly',
  BuffAction.functionAttackBeforeMainOnly: 'functionAttackBeforeMainOnly',
  BuffAction.functionAttackAfterMainOnly: 'functionAttackAfterMainOnly',
  BuffAction.functionSkillAfter: 'functionSkillAfter',
  BuffAction.functionSkillAfterMainOnly: 'functionSkillAfterMainOnly',
  BuffAction.functionTreasureDeviceAfter: 'functionTreasureDeviceAfter',
  BuffAction.functionTreasureDeviceAfterMainOnly: 'functionTreasureDeviceAfterMainOnly',
  BuffAction.guts: 'guts',
  BuffAction.preventInvisibleWhenInstantDeath: 'preventInvisibleWhenInstantDeath',
  BuffAction.overwriteSubattribute: 'overwriteSubattribute',
  BuffAction.avoidanceAttackDeathDamage: 'avoidanceAttackDeathDamage',
  BuffAction.avoidFunctionExecuteSelf: 'avoidFunctionExecuteSelf',
  BuffAction.functionContinue: 'functionContinue',
  BuffAction.pierceSubdamage: 'pierceSubdamage',
  BuffAction.receiveDamagePierce: 'receiveDamagePierce',
  BuffAction.specialReceiveDamage: 'specialReceiveDamage',
  BuffAction.funcHpReduceValue: 'funcHpReduceValue',
  BuffAction.changeBgm: 'changeBgm',
};
